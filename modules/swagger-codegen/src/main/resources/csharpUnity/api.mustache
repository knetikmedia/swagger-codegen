using System;
using System.Collections.Generic;
using RestSharp;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.Model;
{{/hasImport}}
using UnityEngine;

using Object = System.Object;
using Version = {{packageName}}.Model.Version;


namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface I{{classname}}
    {
        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        {{/operation}}
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class {{classname}} : I{{classname}}
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}()
        {
            KnetikClient = KnetikConfiguration.DefaultClient;
        }
    
        /// <summary>
        /// Gets the Knetik client.
        /// </summary>
        /// <value>An instance of the KnetikClient</value>
        public KnetikClient KnetikClient {get; private set;}

        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param> 
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>            
        public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#allParams}}{{#required}}// verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
            {
                throw new KnetikException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
            }
            
            {{/required}}{{/allParams}}
            string urlPath = "{{{path}}}";
            //urlPath = urlPath.Replace("{format}", "json");
            {{#pathParams}}urlPath = urlPath.Replace("{" + "{{baseName}}" + "}", KnetikClient.ParameterToString({{{paramName}}}));
            {{/pathParams}}
    
            Dictionary<string, string> queryParams = new Dictionary<string, string>();
            Dictionary<string, string> headerParams = new Dictionary<string, string>();
            Dictionary<string, string> formParams = new Dictionary<string, string>();
            Dictionary<string, FileParameter> fileParams = new Dictionary<string, FileParameter>();
            String postBody = null;

            {{#queryParams}}
            if ({{paramName}} != null)
            {
                queryParams.Add("{{baseName}}", KnetikClient.ParameterToString({{paramName}}));
            }
            
            {{/queryParams}}
            {{#headerParams}}
            if ({{paramName}} != null)
            {
                headerParams.Add("{{baseName}}", KnetikClient.ParameterToString({{paramName}}));
            }			
            
            {{/headerParams}}
            {{#formParams}}
            if ({{paramName}} != null)
            {
                {{#isFile}}fileParams.Add("{{baseName}}", KnetikClient.ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", KnetikClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
            }			

            {{/formParams}}
            {{#bodyParam}}
            postBody = KnetikClient.Serialize({{paramName}}); // http body (model) parameter
 
            {{/bodyParam}}
            // authentication setting, if any
            String[] authSettings = new String[] { {{#authMethods}} "{{name}}"{{#hasMore}},{{/hasMore}}{{/authMethods}} };

            Debug.LogFormat("Knetik Cloud: Calling '{0}'...", urlPath);

            // make the HTTP request
            IRestResponse response = (IRestResponse) KnetikClient.CallApi(urlPath, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
            {
                throw new KnetikException ((int)response.StatusCode, "Error calling {{nickname}}: " + response.Content, response.Content);
            }
            else if (((int)response.StatusCode) == 0)
            {
                throw new KnetikException ((int)response.StatusCode, "Error calling {{nickname}}: " + response.ErrorMessage, response.ErrorMessage);
            }
    
            Debug.LogFormat("Knetik Cloud: '{0}' returned successfully.", urlPath);
            {{#returnType}}return ({{{returnType}}}) KnetikClient.Deserialize(response.Content, typeof({{{returnType}}}), response.Headers);{{/returnType}}{{^returnType}}return;{{/returnType}}
        }
        {{/operation}}
    }
    {{/operations}}
}
