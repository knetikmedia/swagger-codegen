using System;
using System.Collections.Generic;
using RestSharp;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.Model;
{{/hasImport}}
using {{packageName}}.Utils;
using UnityEngine;

using Object = System.Object;
using Version = {{packageName}}.Model.Version;


namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface I{{classname}}
    {
        {{#operation}}{{#returnType}}{{{returnType}}} {{nickname}}Data { get; }

        {{/returnType}}{{/operation}}
        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}            
        void {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        {{/operation}}
    }
  
    /// <inheritdoc />
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class {{classname}} : I{{classname}}
    {
        {{#operation}}
        private readonly KnetikCoroutine m{{nickname}}Coroutine;
        private DateTime m{{nickname}}StartTime;
        private string m{{nickname}}Path;
        {{/operation}}

        {{#operation}}
        {{#returnType}}
        public {{{returnType}}} {{nickname}}Data { get; private set; }
        public delegate void {{nickname}}CompleteDelegate({{{returnType}}} response);
        public {{nickname}}CompleteDelegate {{nickname}}Complete;
        {{/returnType}}
        {{^returnType}}
        public delegate void {{nickname}}CompleteDelegate();
        public {{nickname}}CompleteDelegate {{nickname}}Complete;
        {{/returnType}}

        {{/operation}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}()
        {
            {{#operation}}
            m{{nickname}}Coroutine = new KnetikCoroutine(KnetikClient.DefaultClient);
            {{/operation}}
        }
    
        {{#operation}}
        /// <inheritdoc />
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}            
        public void {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#allParams}}{{#required}}// verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
            {
                throw new KnetikException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
            }
            {{/required}}{{/allParams}}
            m{{nickname}}Path = "{{{path}}}";
            if (!string.IsNullOrEmpty(m{{nickname}}Path))
            {
                m{{nickname}}Path = m{{nickname}}Path.Replace("{format}", "json");
            }
            {{#pathParams}}m{{nickname}}Path = m{{nickname}}Path.Replace("{" + "{{baseName}}" + "}", KnetikClient.DefaultClient.ParameterToString({{{paramName}}}));
            {{/pathParams}}

            Dictionary<string, string> queryParams = new Dictionary<string, string>();
            Dictionary<string, string> headerParams = new Dictionary<string, string>();
            Dictionary<string, string> formParams = new Dictionary<string, string>();
            Dictionary<string, FileParameter> fileParams = new Dictionary<string, FileParameter>();
            string postBody = null;

            {{#queryParams}}
            if ({{paramName}} != null)
            {
                queryParams.Add("{{baseName}}", KnetikClient.DefaultClient.ParameterToString({{paramName}}));
            }

            {{/queryParams}}
            {{#headerParams}}
            if ({{paramName}} != null)
            {
                headerParams.Add("{{baseName}}", KnetikClient.DefaultClient.ParameterToString({{paramName}}));
            }			

            {{/headerParams}}
            {{#formParams}}
            if ({{paramName}} != null)
            {
                {{#isFile}}fileParams.Add("{{baseName}}", KnetikClient.DefaultClient.ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", KnetikClient.DefaultClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
            }			

            {{/formParams}}
            {{#bodyParam}}
            postBody = KnetikClient.DefaultClient.Serialize({{paramName}}); // http body (model) parameter
 
            {{/bodyParam}}
            // authentication setting, if any
            string[] authSettings = new string[] { {{#authMethods}} "{{name}}"{{#hasMore}},{{/hasMore}}{{/authMethods}} };

            m{{nickname}}StartTime = DateTime.Now;
            KnetikLogger.LogRequest(m{{nickname}}StartTime, m{{nickname}}Path, "Sending server request...");

            // make the HTTP request
            m{{nickname}}Coroutine.ResponseReceived += {{nickname}}Callback;
            m{{nickname}}Coroutine.Start(m{{nickname}}Path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
        }

        private void {{nickname}}Callback(IRestResponse response)
        {
            if (((int)response.StatusCode) >= 400)
            {
                throw new KnetikException((int)response.StatusCode, "Error calling {{nickname}}: " + response.Content, response.Content);
            }
            else if (((int)response.StatusCode) == 0)
            {
                throw new KnetikException((int)response.StatusCode, "Error calling {{nickname}}: " + response.ErrorMessage, response.ErrorMessage);
            }

            {{#returnType}}
            {{nickname}}Data = ({{{returnType}}}) KnetikClient.DefaultClient.Deserialize(response.Content, typeof({{{returnType}}}), response.Headers);
            KnetikLogger.LogResponse(m{{nickname}}StartTime, m{{nickname}}Path, string.Format("Response received successfully:\n{0}", {{nickname}}Data.ToString()));

            if ({{nickname}}Complete != null)
            {
                {{nickname}}Complete({{nickname}}Data);
            }
            {{/returnType}}
            {{^returnType}}
            KnetikLogger.LogResponse(m{{nickname}}StartTime, m{{nickname}}Path, "Response received successfully.");
            if ({{nickname}}Complete != null)
            {
                {{nickname}}Complete();
            }
            {{/returnType}}
        }
        {{/operation}}
    }
    {{/operations}}
}
