using System;
using System.Collections.Generic;
using System.IO;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
    public class KnetikConfiguration
    {
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "{{packageVersion}}";
  
        /// <summary>
        /// Gets or sets the default API client for making HTTP calls.
        /// </summary>
        /// <value>The default client.</value>
        public static KnetikClient DefaultClient;

        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public static Dictionary<string, string> ApiKey = new Dictionary<string, string>();
  
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public static Dictionary<string, string> ApiKeyPrefix = new Dictionary<string, string>();
  
        private static string mTempFolderPath = Path.GetTempPath();
  
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public static string TempFolderPath
        {
            get { return mTempFolderPath; }
  
            set 
            {
                if (string.IsNullOrEmpty(value))
                {
                    mTempFolderPath = value;
                    return;
                }
      
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
      
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    mTempFolderPath = value;
                }
                else
                {
                    mTempFolderPath = value  + Path.DirectorySeparatorChar;
                }
            }
        }

        private const string ISO8601_DATETIME_FORMAT = "o";

        private static string mDateTimeFormat = ISO8601_DATETIME_FORMAT;

        /// <summary>
        /// Gets or sets the the date time format used when serializing in the KnetikClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public static string DateTimeFormat
        {
            get
            {
                return mDateTimeFormat;
            }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    mDateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }

                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                mDateTimeFormat = value;
            }
        }

        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static string ToDebugReport()
        {
            string report = "Unity/C# SDK (com.knetikcloud) Debug Report:\n";
            report += "    OS: " + Environment.OSVersion + "\n";
            report += "    Version of the API: latest \n";
            report += "    SDK Package Version: 1.0.0\n";
  
            return report;
        }
    }
}
