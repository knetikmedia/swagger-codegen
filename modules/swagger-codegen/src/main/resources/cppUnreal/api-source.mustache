{{>licenseInfo}}
{{#operations}}

#include "{{classFilename}}.h"

#include "KnetikCloudClient.h"
#include "KnetikCloudJson.h"

#include <Runtime/Json/Public/Serialization/JsonReader.h>
#include <Runtime/Json/Public/Serialization/JsonSerializer.h>

#if defined(KNETIK_CLOUD_DEBUG)
#pragma optimize("", off)
#endif // KNETIK_CLOUD_DEBUG

U{{classname}}::U{{classname}}()
{
	{{#operation}}
	b{{operationId}}IsComplete = false;
	b{{operationId}}WasSuccessful = false;
	{{#returnType}}
	{{^returnContainer}}
	{{#vendorExtensions.x-codegen-response.isPrimitiveType}}
	{{operationId}}ServerResponse = {{vendorExtensions.x-codegen-response.defaultValue}};
	{{/vendorExtensions.x-codegen-response.isPrimitiveType}}
	{{^vendorExtensions.x-codegen-response.isPrimitiveType}}
	{{#vendorExtensions.x-codegen-response.isString}}
	{{operationId}}ServerResponse = TEXT("");
	{{/vendorExtensions.x-codegen-response.isString}}
	{{^vendorExtensions.x-codegen-response.isString}}
	{{operationId}}ServerResponse = NewObject<U{{{returnBaseType}}}>();
	{{/vendorExtensions.x-codegen-response.isString}}
	{{/vendorExtensions.x-codegen-response.isPrimitiveType}}
	{{/returnContainer}}
	{{/returnType}}
	{{/operation}}
}

U{{classname}}::~U{{classname}}()
{
}
{{#operation}}

void U{{classname}}::Set{{operationId}}Callback({{operationId}}CallbackFunction Callback)
{
	{{operationId}}Callback = Callback;
}

void U{{classname}}::Remove{{operationId}}Callback()
{
	{{operationId}}Callback = nullptr;
}

void U{{classname}}::{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
{
	{{#allParams}}
	{{#required}}
	{{^isPrimitiveType}}
	{{^isContainer}}
	if ({{paramName}} == nullptr)
	{
		KnetikCloudLogger::LogError(KnetikCloudConstants::HttpGenericErrorCode, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");
		return;
	}
	
	{{/isContainer}}
	{{/isPrimitiveType}}
	{{/required}}
	{{/allParams}}
	FString Path("{{{path}}}");
	TArray<FString> AuthTypes;
	TMap<FString, FString> QueryParams;
	TMap<FString, FString> FormParams;
	FString JsonBody("");

	{{#pathParams}}
	FString {{{paramName}}}Replacement("{");
	{{{paramName}}}Replacement.Append("{{baseName}}");
	{{{paramName}}}Replacement.Append("}");
	Path = Path.Replace(*{{{paramName}}}Replacement, *KnetikCloudJson::ToContentString({{{paramName}}}));
	{{/pathParams}}

	b{{operationId}}IsComplete = false;
	b{{operationId}}WasSuccessful = false;

	{{#allParams}}
	{{^isBodyParam}}
	{{^isPathParam}}
	{{#isQueryParam}}
	{{#isString}}
	if ({{paramName}}.Len() > 0)
	{
		QueryParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	}
	{{/isString}}
	{{^isString}}
	{{#isPrimitiveType}}
	QueryParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	if ({{paramName}} != nullptr)
	{
		QueryParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	}
	{{/isPrimitiveType}}
	{{/isString}}

	{{/isQueryParam}}
	{{#isFormParam}}
	{{#isString}}
	if ({{paramName}}.Len() > 0)
	{
		FormParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	}
	{{/isString}}
	{{^isString}}
	{{#isPrimitiveType}}
	FormParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	if ({{paramName}} != nullptr)
	{
		FormParams.Add("{{baseName}}", KnetikCloudJson::ToContentString({{paramName}}));
	}
	{{/isPrimitiveType}}
	{{/isString}}

	{{/isFormParam}}
	{{/isPathParam}}
	{{/isBodyParam}}
	{{/allParams}}
	{{#bodyParam}}
	TSharedPtr<FJsonObject> JsonObject = MakeShareable(new FJsonObject());
	{{#isListContainer}}
	TArray <TSharedPtr<FJsonValue>> JsonValueArray;
	for (auto& CurrentItem : {{paramName}})
	{
		TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ToJsonValue<>(CurrentItem);
		JsonValueArray.Add(ItemJsonValue);
	}
	
	JsonObject->SetArrayField("{{paramName}}", JsonValueArray);
	{{/isListContainer}}
	{{^isListContainer}}
	KnetikCloudJson::AddToJsonObject<>(JsonObject, "{{baseName}}", {{paramName}});
	{{/isListContainer}}
	JsonBody = KnetikCloudJson::ToContentString(JsonObject);

	{{/bodyParam}}
	{{#authMethods}}
	AuthTypes.Add("{{name}}");
	{{/authMethods}}
	KnetikCloudLogger::LogInfo("getOAuthToken: Sending server request...");
	TSharedRef<IHttpRequest> Request = UKnetikCloudClient::CreateRequest(
		Path,
		"{{httpMethod}}",
		AuthTypes,
		QueryParams,
		FormParams,
		JsonBody);
	Request->OnProcessRequestComplete().BindUObject(this, &U{{classname}}::{{operationId}}OnResponseReceived);
	Request->ProcessRequest();
}

void U{{classname}}::{{operationId}}OnResponseReceived(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)
{
	b{{operationId}}IsComplete = true;
	b{{operationId}}WasSuccessful = bWasSuccessful;

	if (Response.IsValid())
	{
		int32 ResponseCode = Response->GetResponseCode();
		if (ResponseCode == KnetikCloudConstants::HttpSuccessfulStatusCode)
		{
			{{#returnType}}

			FString ContentString = Response->GetContentAsString();
#if defined(KNETIK_CLOUD_DEBUG)
			KnetikCloudLogger::LogInfo("{{operationId}} content string: " + ContentString);
#endif // KNETIK_CLOUD_DEBUG

			{{#isListContainer}}
			TSharedRef<TJsonReader<>> JsonReader = TJsonReaderFactory<>::Create(ContentString);
			TArray<TSharedPtr<FJsonValue>> JsonValueArray;
			if (FJsonSerializer::Deserialize(JsonReader, JsonValueArray))
			{
				for (auto& ItemJsonValue : JsonValueArray)
				{
					if (ItemJsonValue.IsValid())
					{
						{{#vendorExtensions.x-codegen-response.items.isString}}
						FString CurrentItem;
						{{/vendorExtensions.x-codegen-response.items.isString}}
						{{^vendorExtensions.x-codegen-response.items.isString}}
						{{#vendorExtensions.x-codegen-response.items.isPrimitiveType}}
						{{{vendorExtensions.x-codegen-response.items.datatype}}} CurrentItem;
						{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
						{{^vendorExtensions.x-codegen-response.items.isPrimitiveType}}
						U{{{vendorExtensions.x-codegen-response.items.baseType}}}* CurrentItem = nullptr;
						{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
						{{/vendorExtensions.x-codegen-response.items.isString}}
						KnetikCloudJson::FromJsonValue<>(ItemJsonValue, CurrentItem);
						{{operationId}}ServerResponse.Add(CurrentItem);
					}
					else
					{
						b{{operationId}}WasSuccessful = false;
						KnetikCloudLogger::LogInfo("{{operationId}}: Unable to parse the content string: " + ContentString);
						break;
					}
				}
			}
			else
			{
				b{{operationId}}WasSuccessful = false;
				KnetikCloudLogger::LogInfo("{{operationId}}: Unable to parse the content string: " + ContentString);
			}
			{{/isListContainer}}
			{{^isListContainer}}
			{{#isMapContainer}}
			TSharedPtr<FJsonObject> JsonObject;
			if (KnetikCloudJson::FromContentString(ContentString, JsonObject))
			{
				for (auto& KeyValuePair : JsonObject->Values)
				{
					{{#vendorExtensions.x-codegen-response.items.isString}}
					FString CurrentItem;
					{{/vendorExtensions.x-codegen-response.items.isString}}
					{{^vendorExtensions.x-codegen-response.items.isString}}
					{{#vendorExtensions.x-codegen-response.items.isPrimitiveType}}
					{{{vendorExtensions.x-codegen-response.items.datatype}}} CurrentItem;
					{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
					{{^vendorExtensions.x-codegen-response.items.isPrimitiveType}}
					U{{{vendorExtensions.x-codegen-response.items.baseType}}}* CurrentItem = nullptr;
					{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
					{{/vendorExtensions.x-codegen-response.items.isString}}
					KnetikCloudJson::FromJsonValue<>(KeyValuePair.Value, CurrentItem);
					{{operationId}}ServerResponse.Add(KeyValuePair.Key, CurrentItem);
				}
			}
			else
			{
				b{{operationId}}WasSuccessful = false;
				KnetikCloudLogger::LogInfo("{{operationId}}: Unable to parse the content string: " + ContentString);
			}
			{{/isMapContainer}}
			{{^isMapContainer}}
			{{#returnTypeIsPrimitive}}
			
			KnetikCloudJson::FromContentString(ContentString, {{operationId}}ServerResponse);
			{{/returnTypeIsPrimitive}}
			{{^returnTypeIsPrimitive}}
			{{#vendorExtensions.x-codegen-response.isString}}
			
			KnetikCloudJson::FromContentString(ContentString, {{operationId}}ServerResponse);
			{{/vendorExtensions.x-codegen-response.isString}}
			{{^vendorExtensions.x-codegen-response.isString}}
			TSharedPtr<FJsonObject> JsonObject;
			if (KnetikCloudJson::FromContentString(ContentString, JsonObject))
			{
				if (JsonObject.IsValid())
				{
					{{operationId}}ServerResponse = KnetikCloudJson::UObjectFromJsonObject<U{{{vendorExtensions.x-codegen-response.baseType}}}>(JsonObject);
				}
				else
				{
					b{{operationId}}WasSuccessful = false;
					KnetikCloudLogger::LogInfo("{{operationId}}: Unable to parse the content string: " + ContentString);
				}
			}
			{{/vendorExtensions.x-codegen-response.isString}}
			{{/returnTypeIsPrimitive}}
			{{/isMapContainer}}
			{{/isListContainer}}

			if (b{{operationId}}WasSuccessful)
			{
				KnetikCloudLogger::LogInfo("{{operationId}}: Received response successfully.");
			}
			{{/returnType}}
		}
		else
		{
			b{{operationId}}WasSuccessful = false;
			KnetikCloudLogger::LogError(ResponseCode, "{{operationId}}: Error response received!");
		}
	}
	else
	{
		b{{operationId}}WasSuccessful = false;
		KnetikCloudLogger::LogError(KnetikCloudConstants::GenericErrorCode, "{{operationId}}: Unknown error - invalid response!");
	}

	{{#returnType}}
	if ({{operationId}}Callback != nullptr)
	{
		{{operationId}}Callback(bWasSuccessful, {{operationId}}ServerResponse);
	}

	On{{operationId}}.Broadcast(bWasSuccessful, {{operationId}}ServerResponse);
	{{/returnType}}
	{{^returnType}}
	if ({{operationId}}Callback != nullptr)
	{
		{{operationId}}Callback(bWasSuccessful);
	}

	On{{operationId}}.Broadcast(bWasSuccessful);
	{{/returnType}}
}
{{/operation}}
{{/operations}}
