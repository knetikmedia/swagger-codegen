{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

#include "KnetikCloudLogger.h"
#include "KnetikCloudJson.h"
#include <Runtime/Json/Public/Serialization/JsonReader.h>
#include <Runtime/Json/Public/Serialization/JsonSerializer.h>

namespace KnetikCloud
{
	{{classname}}::{{classname}}(TSharedPtr<KnetikCloudClient> Client)
	{
		KnetikClient = Client;
		{{#operation}}

		b{{operationId}}IsComplete = false;
		b{{operationId}}WasSuccessful = false;
		{{#returnType}}
		
		{{#isPrimitiveType}}
		{{operationId}}ServerResult = {{{defaultValue}}}
		{{/isPrimitiveType}}
		{{^isPrimitiveType}}
		{{#isString}}
		{{operationId}}ServerResult = TEXT("");
		{{/isString}}
		{{^isString}}
		{{operationId}}ServerResult = MakeShareable(new {{{returnBaseType}}}());
		{{/isString}}
		{{/isPrimitiveType}}		
		{{/returnType}}
		{{/operation}}
	}

	{{classname}}::~{{classname}}()
	{
	}

	{{#operation}}
	void {{classname}}::{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
	{
		{{#allParams}}{{#required}}{{^isPrimitiveType}}{{^isContainer}}
		if ({{paramName}}.IsValid())
		{
			throw KnetikCloudException(400, TEXT("Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}"));
		}

		{{/isContainer}}{{/isPrimitiveType}}{{/required}}{{/allParams}}
		FString Path(TEXT("{{{path}}}"));
		TMap<FString, FString> QueryParams;
		TMap<FString, FString> HeaderParams;
		TMap<FString, FString> FormParams;
		FString JsonBody(TEXT(""));

		{{#pathParams}}
		FString {{{paramName}}}Replacement("{");
		{{{paramName}}}Replacement.Append("{{baseName}}");
		{{{paramName}}}Replacement.Append("}");
		Path = Path.Replace(*{{{paramName}}}Replacement, *KnetikCloudJson::ConvertParameterToContentString({{{paramName}}}));
		{{/pathParams}}
		
		b{{operationId}}IsComplete = false;
		b{{operationId}}WasSuccessful = false;

        {{#allParams}}
        {{^isBodyParam}}
        {{^isPathParam}}
		{{#isPrimitiveType}}
		{{#isQueryParam}}
		QueryParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
		{{/isQueryParam}}
		{{#isHeaderParam}}
		HeaderParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
		{{/isHeaderParam}}
		{{#isFormParam}}
		{{#isFile}}
		{{/isFile}}
		{{^isFile}}
		FormParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
		{{/isFile}}
		{{/isFormParam}}
		{{/isPrimitiveType}}
        {{^isPrimitiveType}}
		if ({{paramName}} != nullptr)
        {
            {{#isQueryParam}}
            QueryParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
            {{/isQueryParam}}
            {{#isHeaderParam}}
            HeaderParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
            {{/isHeaderParam}}
            {{#isFormParam}}
            {{#isFile}}
            {{/isFile}}
            {{^isFile}}
            FormParams.Add("{{baseName}}", KnetikCloudJson::ConvertParameterToContentString({{paramName}}));
            {{/isFile}}
            {{/isFormParam}}
        }

		{{/isPrimitiveType}}
        {{/isPathParam}}
        {{/isBodyParam}}
        {{/allParams}}
		{{#bodyParam}}
		TSharedPtr<FJsonObject> JsonObject(new FJsonObject());
		{{#isPrimitiveType}}
		KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", {{paramName}});
		JsonBody = KnetikCloudJson::ConvertParameterToContentString(JsonObject);
		{{/isPrimitiveType}}
		{{^isPrimitiveType}}
		{{#isListContainer}}
		TArray <TSharedPtr<FJsonValue>> JsonValueArray;
		for (auto& Item : {{paramName}})
		{
			TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ConvertParameterToJsonValue<{{{items.datatype}}}>(Item);
			JsonValueArray.Add(ItemJsonValue);
		}
		
		JsonObject->SetArrayField("{{paramName}}", JsonValueArray);
		JsonBody = KnetikCloudJson::ConvertParameterToContentString(JsonObject);
		{{/isListContainer}}
		{{^isListContainer}}
		KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", {{paramName}});
		JsonBody = KnetikCloudJson::ConvertParameterToContentString(JsonObject);
		{{/isListContainer}}
		{{/isPrimitiveType}}
		{{/bodyParam}}
        {{#authMethods}}
        {{#isApiKey}}
        {{#isKeyInHeader}}
		FString ApiKey = Configuration->GetApiKey("{{keyParamName}}");
		if (ApiKey.Num() > 0)
		{
			HeaderParams.Add("{{keyParamName}}", ApiKey);
		}

        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
		FString ApiKey = Configuration->GetApiKey("{{keyParamName}}");
		if (ApiKey.Num() > 0)
		{
			QueryParams.Add("{{keyParamName}}", ApiKey);
		}

        {{/isKeyInQuery}}
        {{/isApiKey}}
        {{/authMethods}}

		TSharedRef<IHttpRequest> Request = KnetikClient->CreateRequest();
		Request->OnProcessRequestComplete().BindRaw(this, &{{classname}}::{{operationId}}OnResponseReceived);

		KnetikClient->CallApi(
			Path, 			
			"{{httpMethod}}", 
			HeaderParams,
			QueryParams,
			FormParams,
			JsonBody,
			Request);
	}

	bool {{classname}}::{{operationId}}IsComplete() const
	{
		return b{{operationId}}IsComplete;
	}

	bool {{classname}}::{{operationId}}WasSuccessful() const
	{
		return b{{operationId}}WasSuccessful;
	}

	{{#returnType}}
	{{#returnContainer}}
	const {{{returnType}}}& {{classname}}::{{operationId}}GetResult()
	{
		return {{operationId}}ServerResult;
	}
	{{/returnContainer}}
	{{^returnContainer}}
	{{{returnType}}} {{classname}}::{{operationId}}GetResult()
	{
		return {{operationId}}ServerResult;
	}
	{{/returnContainer}}
	{{/returnType}}

	void {{classname}}::{{operationId}}OnResponseReceived(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)
	{
		b{{operationId}}IsComplete = true;
		b{{operationId}}WasSuccessful = bWasSuccessful;

		if (!bWasSuccessful)
		{
			KnetikCloudLogger::LogError(500, "Error calling {{operationId}}: unexpected response type: " + Response->GetResponseCode());
		}

		{{#returnType}}
		TSharedRef<TJsonReader<>> Reader = TJsonReaderFactory<>::Create(Response->GetContentAsString());

		{{#isListContainer}}
		TArray<TSharedPtr<FJsonValue>> JsonValueArray;
		if (FJsonSerializer::Deserialize(Reader, JsonValueArray))
		{
			for (auto& ItemJson : JsonValueArray)
			{
				{{{vendorExtensions.x-codegen-response.items.datatype}}} Item({{{vendorExtensions.x-codegen-response.items.defaultValue}}});
				KnetikCloudJson::ConvertJsonValueToParameter<{{{vendorExtensions.x-codegen-response.items.datatype}}}>(ItemJson, Item);
				ServerResult.Add(Item);
			}
		}
		{{/isListContainer}}
		{{^isListContainer}}
		{{#isMapContainer}}
/*
		TSharedPtr<FJsonValue> JsonValueArray;
		if (FJsonSerializer::Deserialize(Reader, JsonValueArray))
		{
			// TMAP TODO: Response Support
			for (auto& ItemJson : JsonValueArray)
			{
				{{{vendorExtensions.x-codegen-response.items.datatype}}} Item({{{vendorExtensions.x-codegen-response.items.defaultValue}}});
				KnetikCloudJson::ConvertJsonValueToParameter<{{{vendorExtensions.x-codegen-response.items.datatype}}}>(ItemJson, Item);
				//ServerResult.Add(Item);
			}
		}
*/
		{{/isMapContainer}}
		{{^isMapContainer}}
		{{#isPrimitiveType}}
		TSharedPtr<FJsonValue> JsonValue;
		if (FJsonSerializer::Deserialize(Reader, JsonValue))
		{
			KnetikCloudJson::ConvertJsonValueToParameter<{{{vendorExtensions.x-codegen-response.baseType}}}>(JsonValue, {{operationId}}ServerResult);
		}
		{{/isPrimitiveType}}
		{{^isPrimitiveType}}
		{{#vendorExtensions.x-codegen-response.isString}}
		TSharedPtr<FJsonValue> JsonValue;
		if (FJsonSerializer::Deserialize(Reader, JsonValue))
		{
			KnetikCloudJson::ConvertJsonValueToParameter<{{{vendorExtensions.x-codegen-response.baseType}}}>(JsonValue, {{operationId}}ServerResult);
		}
		{{/vendorExtensions.x-codegen-response.isString}}
		{{^vendorExtensions.x-codegen-response.isString}}
		TSharedPtr<FJsonObject> JsonObject;
		if (FJsonSerializer::Deserialize(Reader, JsonObject))
		{
			KnetikCloudJson::ConvertJsonObjectToParameter<{{{vendorExtensions.x-codegen-response.baseType}}}>(JsonObject, {{operationId}}ServerResult);
		}
		{{/vendorExtensions.x-codegen-response.isString}}
		{{/isPrimitiveType}}
		{{/isMapContainer}}
		{{/isListContainer}}
		{{/returnType}}
	}

	{{/operation}}
}
{{/operations}}
