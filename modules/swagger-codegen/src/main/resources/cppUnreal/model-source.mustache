{{>licenseInfo}}

{{#models}}{{#model}}
#include "{{classFilename}}.h"

#include "KnetikCloudConstants.h"
#include "KnetikCloudJson.h"
#include "KnetikCloudLogger.h"
#include "KnetikCloudTypeFactory.h"

#if defined(KNETIK_CLOUD_DEBUG)
#pragma optimize("", off)
#endif // KNETIK_CLOUD_DEBUG


{{classname}}::{{classname}}()
{
	{{#vars}}
	{{^isInherited}}
	{{^isContainer}}
	{{#isString}}
	{{nameInCamelCase}} = {{{defaultValue}}};
	{{/isString}}
	{{^isString}}
	{{#isPrimitiveType}}
	{{nameInCamelCase}} = {{{defaultValue}}};
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	{{nameInCamelCase}} = NewObject<{{{baseType}}}>();
	{{/isPrimitiveType}}
	{{/isString}}
	{{/isContainer}}
	{{/isInherited}}
	{{/vars}}
}

{{classname}}::~{{classname}}()
{
}

TSharedPtr<FJsonObject> {{classname}}::ToJson() const
{
	{{#parent}}
	TSharedPtr<FJsonObject> JsonObject(this->{{{parent}}}::ToJson());
	{{/parent}}
	{{^parent}}
	TSharedPtr<FJsonObject> JsonObject(new FJsonObject());
	{{/parent}}
	{{#vars}}
	{{^isInherited}}
	{{#isListContainer}}

	TArray<TSharedPtr<FJsonValue>> {{nameInCamelCase}}JsonValueArray;
	{{nameInCamelCase}}JsonValueArray.Reserve({{nameInCamelCase}}.Num());
	for (auto& CurrentItem : {{nameInCamelCase}})
	{
		TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ToJsonValue<>(CurrentItem);
		{{nameInCamelCase}}JsonValueArray.Add(ItemJsonValue);
	}

	JsonObject->SetArrayField("{{baseName}}", {{nameInCamelCase}}JsonValueArray);
	{{/isListContainer}}
	{{^isListContainer}}
	{{#isMapContainer}}

	TSharedPtr<FJsonObject> {{nameInCamelCase}}JsonMap = MakeShareable(new FJsonObject());
	for (auto& KeyValuePair : {{nameInCamelCase}})
	{
		TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ToJsonValue<>(KeyValuePair.Value);
		{{nameInCamelCase}}JsonMap->Values.Add(KeyValuePair.Key, ItemJsonValue);
	}

	JsonObject->SetObjectField("{{baseName}}", {{nameInCamelCase}}JsonMap);
	{{/isMapContainer}}
	{{^isMapContainer}}
	KnetikCloudJson::AddToJsonObject<>(JsonObject, "{{baseName}}", {{nameInCamelCase}});
	{{/isMapContainer}}
	{{/isListContainer}}
	{{/isInherited}}
	{{/vars}}
	return JsonObject;
}

void {{classname}}::FromJson(TSharedPtr<FJsonObject> JsonObject)
{
	{{#parent}}
	this->{{{parent}}}::FromJson(JsonObject);
	{{/parent}}
	{{#vars}}
	{{^isInherited}}
	{{#isListContainer}}
	{{nameInCamelCase}}.Empty();
	const TArray<TSharedPtr<FJsonValue>>* {{nameInCamelCase}}JsonValueArray = nullptr;
	if (JsonObject->TryGetArrayField("{{baseName}}", {{nameInCamelCase}}JsonValueArray))
	{
		for (auto& ItemJsonValue : *{{nameInCamelCase}}JsonValueArray)
		{
			{{#items.isString}}
			FString CurrentItem;
			KnetikCloudJson::FromJsonValue<{{{items.baseType}}}>(ItemJsonValue, CurrentItem);
			{{/items.isString}}
			{{^items.isString}}
			{{#items.isPrimitiveType}}
			{{{items.datatype}}} CurrentItem;
			KnetikCloudJson::FromJsonValue<{{{items.baseType}}}>(ItemJsonValue, CurrentItem);
			{{/items.isPrimitiveType}}
			{{^items.isPrimitiveType}}
			{{{items.datatype}}} CurrentItem = KnetikCloudJson::UObjectFromJsonValue<{{{items.baseType}}}>(ItemJsonValue);
			{{/items.isPrimitiveType}}
			{{/items.isString}}
			{{nameInCamelCase}}.Add(CurrentItem);
		}
	}

	{{/isListContainer}}
	{{^isListContainer}}
	{{#isMapContainer}}

	{{nameInCamelCase}}.Empty();
	const TSharedPtr<FJsonObject>* {{nameInCamelCase}}JsonObject = nullptr;
	if (JsonObject->TryGetObjectField("{{baseName}}", {{nameInCamelCase}}JsonObject))
	{
		TMap<FString, TSharedPtr<FJsonValue>> {{nameInCamelCase}}JsonValuesMap = (*{{nameInCamelCase}}JsonObject)->Values;
		for (auto& KeyValuePair : {{nameInCamelCase}}JsonValuesMap)
		{
			{{#items.isString}}
			FString CurrentItem;
			KnetikCloudJson::FromJsonValue<{{{items.baseType}}}>(KeyValuePair.Value, CurrentItem);
			{{/items.isString}}
			{{^items.isString}}
			{{#items.isPrimitiveType}}
			{{{items.datatype}}} CurrentItem;
			KnetikCloudJson::FromJsonValue<{{{items.baseType}}}>(KeyValuePair.Value, CurrentItem);
			{{/items.isPrimitiveType}}
			{{^items.isPrimitiveType}}
			{{{items.datatype}}} CurrentItem = KnetikCloudJson::UObjectFromJsonValue<{{{items.baseType}}}>(KeyValuePair.Value);
			{{/items.isPrimitiveType}}
			{{/items.isString}}
			{{nameInCamelCase}}.Add(KeyValuePair.Key, CurrentItem);
		}
	}

	{{/isMapContainer}}
	{{^isMapContainer}}
	KnetikCloudJson::GetFromJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", {{nameInCamelCase}});
	{{/isMapContainer}}
	{{/isListContainer}}

	{{/isInherited}}
	{{/vars}}
}
{{#vendorExtensions.x-discriminator-value}}

FString {{classname}}::GetSubtypeString()
{
	return "{{vendorExtensions.x-discriminator-value}}";
}

{{{parent}}}* {{classname}}::CreateSubtype()
{
	return NewObject<{{classname}}>();
}
{{/vendorExtensions.x-discriminator-value}}
{{/model}}
{{/models}}
