{{>licenseInfo}}
{{#models}}{{#model}}
#include "{{classname}}.h"

#include "KnetikCloudConstants.h"
#include "KnetikCloudJson.h"
#include "KnetikCloudLogger.h"
#include "KnetikCloudTypeFactory.h"


namespace KnetikCloud
{
	{{classname}}::{{classname}}()
	{
		{{#vars}}
		{{^isInherited}}
		{{#isNotContainer}}
		{{#isPrimitiveType}}
		m{{name}} = {{{defaultValue}}};
		{{/isPrimitiveType}}
		{{^isPrimitiveType}}
		{{#isString}}
		m{{name}} = {{{defaultValue}}};
		{{/isString}}
		{{#isDateTime}}
		m{{name}} = {{{defaultValue}}};
		{{/isDateTime}}
		{{/isPrimitiveType}}
		{{/isNotContainer}}
		{{^required}}
		b{{name}}IsSet = false;
		{{/required}}
		{{/isInherited}}

		{{/vars}}
	}

	{{classname}}::~{{classname}}()
	{
	}

	TSharedPtr<FJsonObject> {{classname}}::ToJson() const
	{
		{{#parent}}
		TSharedPtr<FJsonObject> JsonObject(this->{{{parent}}}::ToJson());
		{{/parent}}
		{{^parent}}
		TSharedPtr<FJsonObject> JsonObject(new FJsonObject());
		{{/parent}}
		{{#vars}}
		{{^isInherited}}
		{{#isPrimitiveType}}
		{{^isListContainer}}
		{{^isMapContainer}}
		{{#required}}

		KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", m{{name}});
		{{/required}}
		{{^required}}

		if (b{{name}}IsSet)
		{
			KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", m{{name}});
		}
		{{/required}}
		{{/isMapContainer}}
		{{/isListContainer}}
		{{/isPrimitiveType}}
		{{#isListContainer}}

		TArray<TSharedPtr<FJsonValue>> {{name}}JsonValueArray;
		{{name}}JsonValueArray.Reserve(m{{name}}.Num());
		for (auto& Item : m{{name}})
		{
			TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ConvertParameterToJsonValue<{{{items.baseType}}}>(Item);
			{{name}}JsonValueArray.Add(ItemJsonValue);
		}

		{{#required}}
		JsonObject->SetArrayField("{{baseName}}", {{name}}JsonValueArray);
		{{/required}}
		{{^required}}
		if ({{name}}JsonValueArray.Num() > 0)
		{
			JsonObject->SetArrayField("{{baseName}}", {{name}}JsonValueArray);
		}
		{{/required}}
		{{/isListContainer}}
		{{#isMapContainer}}
		
		TSharedPtr<FJsonObject> {{name}}JsonMap = MakeShareable(new FJsonObject());
		for (auto& KeyValuePair : m{{name}})
		{
			TSharedPtr<FJsonValue> ItemJsonValue = KnetikCloudJson::ConvertParameterToJsonValue<{{{items.baseType}}}>(KeyValuePair.Value);
			{{name}}JsonMap->Values.Add(KeyValuePair.Key, ItemJsonValue);
		}

		{{#required}}
		JsonObject->SetObjectField("{{baseName}}", {{name}}JsonMap);
		{{/required}}
		{{^required}}
		if ({{name}}JsonMap->Values.Num() > 0)
		{
			JsonObject->SetObjectField("{{baseName}}", {{name}}JsonMap);
		}
		{{/required}}
		{{/isMapContainer}}
		{{^isListContainer}}
		{{^isMapContainer}}
		{{^isPrimitiveType}}

		{{^required}}
		if (b{{name}}IsSet)
		{
			KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", m{{name}});
		}
		{{/required}}
		{{#required}}
		KnetikCloudJson::AddParameterToJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", m{{name}});
		{{/required}}
		{{/isPrimitiveType}}
		{{/isMapContainer}}
		{{/isListContainer}}
		{{/isInherited}}
		{{/vars}}
		return JsonObject;
	}

	void {{classname}}::FromJson(TSharedPtr<FJsonObject> JsonObject)
	{
		{{#parent}}
		this->{{{parent}}}::FromJson(JsonObject);
		{{/parent}}
		{{#vars}}
		{{^isInherited}}
		{{#isPrimitiveType}}
		{{^isListContainer}}
		{{^isMapContainer}}

		if (JsonObject->HasField("{{baseName}}"))
		{
			{{{datatype}}} {{name}}Item({{{defaultValue}}});
			KnetikCloudJson::GetParameterFromJsonObject<{{{baseType}}}>(JsonObject, "{{baseName}}", {{name}}Item);
			Set{{name}}({{name}}Item);
		}
		{{/isMapContainer}}
		{{/isListContainer}}
		{{/isPrimitiveType}}
		{{#isListContainer}}

		m{{name}}.Empty();
		if (JsonObject->HasField("{{baseName}}"))
		{
			TArray<TSharedPtr<FJsonValue>> {{name}}JsonValueArray = JsonObject->GetArrayField("{{baseName}}");
			for (auto& ItemJsonValue : {{name}}JsonValueArray)
			{
				{{{items.datatype}}} {{name}}Item({{{items.defaultValue}}});
				KnetikCloudJson::ConvertJsonValueToParameter<{{{items.baseType}}}>(ItemJsonValue, {{name}}Item);
				m{{name}}.Add({{name}}Item);
			}
		}
		{{/isListContainer}}
		{{#isMapContainer}}

		m{{name}}.Empty();
		if (JsonObject->HasField("{{baseName}}"))
		{
			TSharedPtr<FJsonObject> {{name}}JsonObject = JsonObject->GetObjectField("{{baseName}}");

			TMap<FString, TSharedPtr<FJsonValue>> {{name}}JsonValuesMap = {{name}}JsonObject->Values;
			for (auto& KeyValuePair : {{name}}JsonValuesMap)
			{
				FString Key = KeyValuePair.Key;
				{{#items.isPrimitiveType}}
				{{{items.datatype}}} {{name}}Item({{{items.defaultValue}}});
				KnetikCloudJson::ConvertJsonValueToParameter<{{{items.baseType}}}>(KeyValuePair.Value, {{name}}Item);
				m{{name}}.Add(Key, {{name}}Item);
				{{/items.isPrimitiveType}}
				{{^items.isPrimitiveType}}
				{{#items.isString}}
				{{{items.datatype}}} {{name}}Item({{{items.defaultValue}}});
				KnetikCloudJson::ConvertJsonValueToParameter<{{{items.baseType}}}>(KeyValuePair.Value, {{name}}Item);
				m{{name}}.Add(Key, {{name}}Item);
				{{/items.isString}}
				{{^items.isString}}
				TSharedPtr<FJsonObject> SubJsonObject = KeyValuePair.Value->AsObject();

				FString TypeString = "<TYPE_MISSING>";
				if (SubJsonObject->HasField(KnetikCloudConstants::JsonTypeString))
				{
					TypeString = SubJsonObject->GetStringField(KnetikCloudConstants::JsonTypeString);
				}

				{{{items.datatype}}} SubItem = KnetikCloudTypeFactory::CreateSubtype<{{{items.datatype}}}>(TypeString);
				SubItem->FromJson(SubJsonObject);
				m{{name}}.Add(Key, SubItem);

				{{/items.isString}}
				{{/items.isPrimitiveType}}
			}
		}
		{{/isMapContainer}}
		{{^isListContainer}}
		{{^isMapContainer}}
		{{^isPrimitiveType}}

		{{{datatype}}} {{name}}Item({{{defaultValue}}});
		if (JsonObject->HasField("{{baseName}}"))
		{
			KnetikCloudJson::GetParameterFromJsonObject<{{{items.baseType}}}>(JsonObject, "{{baseName}}", {{name}}Item);
		}
		Set{{name}}({{name}}Item);
		{{/isPrimitiveType}}
		{{/isMapContainer}}
		{{/isListContainer}}
		{{/isInherited}}
		{{/vars}}
	}

	{{#vars}}
	{{^isInherited}}
	{{^isNotContainer}}
	{{{datatype}}}& {{classname}}::Get{{name}}()
	{
		return m{{name}};
	}

	void {{classname}}::Set{{name}}({{{datatype}}} Value)
	{
		m{{name}} = Value;
		{{^required}}b{{name}}IsSet = true;{{/required}}
	}

	{{/isNotContainer}}
	{{#isNotContainer}}
	{{{datatype}}} {{classname}}::Get{{name}}() const
	{
		return m{{name}};
	}

	{{#isString}}
	void {{classname}}::Set{{name}}(const FString& Value)
	{
		m{{name}} = Value;
		{{^required}}b{{name}}IsSet = true;{{/required}}
	}
	{{/isString}}
	{{^isString}}
	void {{classname}}::Set{{name}}({{{datatype}}} Value)
	{
		m{{name}} = Value;
		{{^required}}b{{name}}IsSet = true;{{/required}}
	}
	{{/isString}}

	{{/isNotContainer}}
	{{^required}}
	bool {{classname}}::{{name}}IsSet() const
	{
		return b{{name}}IsSet;
	}

	void {{classname}}::Unset{{name}}()
	{
		b{{name}}IsSet = false;
	}

	{{/required}}
	{{/isInherited}}
	{{/vars}}
}
{{/model}}
{{/models}}
