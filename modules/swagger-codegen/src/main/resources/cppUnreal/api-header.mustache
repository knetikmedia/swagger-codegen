{{>licenseInfo}}
{{#operations}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#pragma once

{{^parent}}
#include "KnetikCloudClient.h"
#include "KnetikCloudResponseContext.h"
{{/parent}}
{{#imports}}{{{import}}}
{{/imports}}

namespace KnetikCloud
{
	class {{classname}}
	{
	public:
		{{classname}}(TSharedPtr<KnetikCloudClient> Client);
		virtual ~{{classname}}();
		{{#operation}}

		/// <summary>
		/// {{summary}}
		/// </summary>
		/// <remarks>
		/// {{notes}}
		/// </remarks>
		{{#allParams}}
		/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
		{{/allParams}}
		void {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

		bool {{operationId}}IsComplete() const;
		bool {{operationId}}WasSuccessful() const;
		{{#returnType}}
		{{#returnContainer}}
		const {{{returnType}}}& {{operationId}}GetResult();
		{{/returnContainer}}
		{{^returnContainer}}
		{{{returnType}}} {{operationId}}GetResult();
		{{/returnContainer}}
		{{/returnType}}

		{{/operation}}
		// Callbacks
	private:
		{{#operation}}
		void {{operationId}}OnResponseReceived(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);
		{{/operation}}		

		// Data members
	private:
		TSharedPtr<KnetikCloudClient> KnetikClient;
		{{#operation}}

		bool b{{operationId}}IsComplete;
		bool b{{operationId}}WasSuccessful;
		{{#returnType}}
		{{#returnContainer}}
		{{{returnType}}} {{operationId}}ServerResult;
		{{/returnContainer}}
		{{^returnContainer}}
		{{{returnType}}} {{operationId}}ServerResult;
		{{/returnContainer}}
		{{/returnType}}
		{{/operation}}
	};
}
{{/operations}}
